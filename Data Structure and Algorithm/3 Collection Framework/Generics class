Consider the following Container class.

public class Container {
private Object object;
public void set(Object object) {
this.object = object;
}
public Object get() {
return object;
}
}

This non-generic Container class operates on objects of any type.

Since its methods accept or return an Object, you can pass whatever you want but there is no way to verify at compile time, how the class is being used. Someone may place an Integer in the container and expect to get Integers out of it, while someone else may pass in a String resulting in a runtime error.

Generic version of the Container Class

A generic class is defined with the following format:

class name<T1, T2, ..., Tn> { /_ ... _/ }

The type parameter section, delimited by angle brackets (<>), follows the class name. It specifies the type parameters (also called type variables) T1, T2, ... and Tn.

Container class can be updated with Generics as follows:

public class Container<T> {
// T stands for "Type"
private T t;
public void set(T t) {
this.t = t;
}
public T get() {
return t;
}
}

As you can see, all occurrences of Objects are replaced by T.

A type variable can be any non-primitive type you specify, any class type, any interface type, any array type or even another type variable.

This same technique can be applied to create generic interfaces as well.

---

Invoking and instantiating a Generic Type

To reference the generic Container class from within your code, you must perform a generic type invocation, which replaces T with some concrete value, such as Integer:

Container<Integer> integerContainer;

Generic type invocation can be considered as being similar to an ordinary method invocation but instead of passing an argument to a method, you are passing a type argument to the Container class itself â€” Integer in this case.

To instantiate this class, you can use the new keyword as usual, but you need to place <Integer> between the class name and the parenthesis:

Container<Integer> integerContainer = new Container<Integer>();

In Java SE 7 and later, you can replace the type arguments required to invoke the constructor of a generic class with an empty set of type arguments (<>).

For example, you can create an instance of Container<Integer> with the following statement:

Container<Integer> integerContainer = new Container<>();

Type parameter Naming Conventions

By convention, type parameter names are single, uppercase letters.

The most commonly used type parameter names are:

E - Element (used extensively by the Java Collections Framework)

K - Key

N - Number

T - Type
