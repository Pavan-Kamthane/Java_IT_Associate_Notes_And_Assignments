We will first discuss about HashSet class.

HashSet uses hash tables for storing the unique elements. There is no guarantee on the iteration order of the set. HashSet depends on the equals() and hashCode() methods for detecting duplicates and null values are allowed.

The code for creating a HashSet object is shown below.

import java.util.HashSet; // Importing the HashSet class
import java.util.Set;
public class Tester {
public static void main(String[] args) {
Set<String> uniqueItems = new HashSet<String>(); // Creating HashSet object
}
}

======================================================================

Consider the example given below where duplicate entries have been added to a HashSet but only unique entries are displayed in a random order in the output.

import java.util.HashSet;
import java.util.Set;
public class HashSetExample {
public static void main(String[] args) {
//Creating HashSet object
Set<String> food = new HashSet<String>();
food.add("Pasta"); // Adding elements to the HashSet
food.add("Noodles");
food.add("Sandwich");
food.add("Pasta");
food.add("Burger");
food.add("Noodles");
System.out.print("Set output without the duplicates: ");
System.out.println(food);
}
}

===========================================================================

Next, we will discuss about LinkedHashSet. LinkedHashSet uses a combination of hash tables and linked lists for storing elements. Elements are returned in the order of their insertion. LinkedHashSet depends on the equals() and hashCode() methods for detecting duplicates and null values are allowed.

The code for creating a LinkedHashSet object is shown below.

import java.util.LinkedHashSet; // Importing the LinkedHashSet class
import java.util.Set;
public class Tester {
public static void main(String[] args) {
Set<String> uniqueItems = new LinkedHashSet<String>(); // Creating LinkedHashSet object
}
}

Consider the example given below where duplicate entries have been added to a LinkedHashSet but only unique entries are displayed in the order of insertion in the output.

import java.util.LinkedHashSet;// Importing the LinkedHashSet class
import java.util.Set;
public class Tester {
public static void main(String[] args) {
Set<String> food = new LinkedHashSet<String>(); // Creating LinkedHashSet object
food.add("Pasta"); // Adding elements to the LinkedHashSet
food.add("Noodles");
food.add("Sandwich");
food.add("Pasta");
food.add("Burger");
food.add("Noodles");
System.out.print("The duplicates are removed and displayed in the order in which the elements are inserted: ");
System.out.println(food);
}
}

=============================================================================

Next, we will discuss about TreeSet. TreeSet uses a tree-based data structure for storing elements. Elements are returned based on natural ordering. For example, in case of String, the order will be alphabetical order. TreeSet depends on compareTo() method for ordering as well as for detecting duplicates.

The code for creating a TreeSet object is shown below.

import java.util.TreeSet;
import java.util.Set; // Importing the TreeSet class
public class Tester {
public static void main(String[] args) {
Set<String> uniqueItems = new TreeSet<String>(); // Creating a TreeSet object
}
}
